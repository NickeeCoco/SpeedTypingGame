{"version":3,"sources":["hooks/useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","gameDuration","useState","text","setText","timeRemaining","setTimeRemaining","isGameStarted","setIsGameStarted","wordCount","setWordCount","textareaRef","useRef","handleChange","e","target","value","countWords","string","trim","split","filter","word","length","startGame","console","log","current","disabled","focus","endGame","useEffect","setTimeout","time","App","className","onChange","ref","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQA4DeA,MA1Df,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EAEdC,mBAAS,IAFK,mBAE/BC,EAF+B,KAEzBC,EAFyB,OAGIF,mBAASD,GAHb,mBAG/BI,EAH+B,KAGhBC,EAHgB,OAIIJ,oBAAS,GAJb,mBAI/BK,EAJ+B,KAIhBC,EAJgB,OAKJN,mBAAS,GALL,mBAK/BO,EAL+B,KAKpBC,EALoB,KAOhCC,EAAcC,iBAAO,MAE3B,SAASC,EAAaC,GACpBV,EAAQU,EAAEC,OAAOC,OAGnB,SAASC,EAAWC,GAGlB,OAFYA,EAAOC,OAAOC,MAAM,KACXC,QAAO,SAAAC,GAAI,MAAa,KAATA,KACpBC,OAGlB,SAASC,IACPhB,GAAiB,GACjBF,EAAiBL,GACjBS,EAAa,GACbN,EAAQ,IACRqB,QAAQC,IAAIf,EAAYgB,SACxBhB,EAAYgB,QAAQC,UAAW,EAC/BjB,EAAYgB,QAAQE,QAGtB,SAASC,IACPtB,GAAiB,GACjBE,EAAaO,EAAWd,IAgB1B,OAbA4B,qBAAU,WAELxB,GAAiBF,EAAgB,GAClC2B,YAAW,WACT1B,GAAiB,SAAA2B,GAAI,OAAIA,EAAO,OAC/B,KAGF5B,GAAiB,GAClByB,MAED,CAACzB,EAAeE,IAEZ,CACLJ,OACAI,gBACAI,cACAN,gBACAI,YACAI,eACAW,cCpBWU,MAhCf,WAAgB,IAAD,EASTlC,IAPFG,EAFW,EAEXA,KACAI,EAHW,EAGXA,cACAI,EAJW,EAIXA,YACAN,EALW,EAKXA,cACAI,EANW,EAMXA,UACAI,EAPW,EAOXA,aACAW,EARW,EAQXA,UAGF,OACE,yBAAKW,UAAU,OACb,qDACA,8BACEnB,MAAOb,EACPiC,SAAUvB,EACVe,UAAWrB,EACX8B,IAAK1B,IAEP,+CAAqBN,GACrB,4BACEiC,QAASd,EACTI,SAAUrB,GAFZ,SAMA,2CAAiBE,KCnBH8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.694bc7c9.chunk.js","sourcesContent":["import {useState, useRef, useEffect} from \"react\"\r\n\r\nfunction useWordGame(gameDuration = 10) {\r\n  \r\n  const [text, setText] = useState('')\r\n  const [timeRemaining, setTimeRemaining] = useState(gameDuration)\r\n  const [isGameStarted, setIsGameStarted] = useState(false)\r\n  const [wordCount, setWordCount] = useState(0)\r\n\r\n  const textareaRef = useRef(null)\r\n\r\n  function handleChange(e) {\r\n    setText(e.target.value)\r\n  }\r\n\r\n  function countWords(string) {\r\n    const arr = string.trim().split(' ')\r\n    const wordsArr = arr.filter(word => word !== '')\r\n    return wordsArr.length\r\n  }\r\n\r\n  function startGame() {\r\n    setIsGameStarted(true)\r\n    setTimeRemaining(gameDuration)\r\n    setWordCount(0)\r\n    setText('')\r\n    console.log(textareaRef.current)\r\n    textareaRef.current.disabled = false;\r\n    textareaRef.current.focus()\r\n  }\r\n\r\n  function endGame() {\r\n    setIsGameStarted(false)\r\n    setWordCount(countWords(text))\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if(isGameStarted && timeRemaining > 0) {\r\n      setTimeout(() => {\r\n        setTimeRemaining(time => time - 1)\r\n      }, 1000)\r\n    }\r\n\r\n    if(timeRemaining <= 0) {\r\n      endGame()\r\n    }\r\n  }, [timeRemaining, isGameStarted])\r\n\r\n  return {\r\n    text, \r\n    isGameStarted, \r\n    textareaRef, \r\n    timeRemaining, \r\n    wordCount,\r\n    handleChange, \r\n    startGame, \r\n  }\r\n}\r\n\r\nexport default useWordGame","import React from 'react';\nimport './App.css';\nimport useWordGame from \"./hooks/useWordGame\"\n\nfunction App() {\n  const {\n    text, \n    isGameStarted, \n    textareaRef, \n    timeRemaining, \n    wordCount,\n    handleChange, \n    startGame\n  } = useWordGame()\n\n  return (\n    <div className=\"App\">\n      <h1>How fast do you type?</h1>\n      <textarea \n        value={text} \n        onChange={handleChange}\n        disabled={!isGameStarted}\n        ref={textareaRef}\n      />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button \n        onClick={startGame} \n        disabled={isGameStarted}\n      >\n        Start\n      </button>\n      <h1>Word Count: {wordCount}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}